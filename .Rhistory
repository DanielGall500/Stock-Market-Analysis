iris.pred <- knn(train=iris.training, test=iris.test, cl=iris.train_labels, k=3)
ggplot(iris.pred, aes(iris.pred)) + geom_histogram()
iris_pred
iris.pred
install.packages('gmodel')
install.packages('gmodels')
library(gmodels)
CrossTable(x = iris.test_labels, y = iris.pred, prop.chisq=FALSE)
data(longley)
d <- longley
d
fit <- lm(Employed~., data=d)
summary(fit)
predictions <- predict(fit, longley)
rss <- mean((d$Employed - predictions)^2)
rss
ggplot(aes(d$Year, d$Employed, colour=d$GNP)) + geom_point()
library(ggplot2)
ggplot(aes(d$Year, d$Employed, colour=d$GNP)) + geom_point()
ggplot(aes(Year, Employed, colour=GNP), d) + geom_point()
ggplot(aes(Year, Employed, colour=GNP), data=d) + geom_point()
predictions
fit
coef(fit)
fit[0]
fit["Intercept"]
coef(fit)["Intercept"]
coef(fit)["(Intercept)"]
coef(fit)
ggplot(aes(Year, Employed, colour=GNP), data=d) + geom_point() +
geom_line(aes(x=Year, y=(x * 1.829e+00) + -3.482e+03), data=d)
geom_line(aes(x=Year, y=(Year * 1.829e+00) + -3.482e+03), data=d)
ggplot(aes(Year, Employed, colour=GNP), data=d) + geom_point() +
geom_line(aes(x=Year, y=(Year * 1.829e+00) + -3.482e+03), data=d)
ggplot(aes(Year, Employed, colour=GNP), data=d) + geom_point()
ggplot(aes(Year, Employed, colour=GNP), data=d) + geom_point() + geom_line()
library(VGAM)
install.packages(VGAM)
install.packages('VGAM')
library(VGAM)
d <- iris
logistic_reg <- vglm(Species~., family=multinomial, data=d)
logistic_reg <- vglm(Species~., family=multinomial, data=d)
summary(fit)
probabilities <- predict(fit, d[1:4,], type="response")
d <- iris
logistic_reg <- vglm(Species~., family=multinomial, data=d)
summary(fit)
probabilities <- predict(fit, d[1:4,], type="response")
logistic_reg <- vglm(Species~., family=multinomial, data=iris)
summary(fit)
probabilities <- predict(fit, iris[1:4,], type="response")
logistic_reg <- vglm(Species~., family=multinomial, data=d)
summary(fit)
probabilities <- predict(logistic_reg, d[1:4,], type="response")
probabilities
predictions <- apply(probabilities, 1, which.max)
predictions[which(predictions == "1")] <- levels(iris$Species)[1]
predictions[which(predictions == "1")] <- levels(iris$Species)[1]
predictions[which(predictions == "2")] <- levels(iris$Species)[2]
predictions[which(predictions == "3")] <- levels(iris$Species)[3]
table(predictions, iris$Species)
d <- iris
logistic_reg <- vglm(Species~., family=multinomial, data=d)
summary(fit)
probabilities <- predict(logistic_reg, d[1:4,], type="response")
probabilities
predictions <- apply(probabilities, 1, which.max)
predictions[which(predictions == "1")] <- levels(iris$Species)[1]
predictions[which(predictions == "2")] <- levels(iris$Species)[2]
predictions[which(predictions == "3")] <- levels(iris$Species)[3]
table(predictions, iris$Species)
add <- function(a, b) {
return a + b
}
add <- function(a, b) {
r <- a + b
return (r)
}
DannyG <- function(a, b) {
r <- a + b
return (r)
}
DannyG(1,2)
DannyG <- function(a, b) {
r <- a + b
}
DannyG <- function(a, b) {
r <- a + b
return (r)
}
library(ggplot2)
nmmaps<-read.csv("chicago-nmmaps.csv", as.is=T)
nmmaps$date<-as.Date(nmmaps$date)
nmmaps<-nmmaps[nmmaps$date>as.Date("1996-12-31"),]
nmmaps$year<-substring(nmmaps$date,1,4)
head(nmmaps)
ggplot(aes(Sepal.Length, Sepal.Width), data=iris)
ggplot(aes(Sepal.Length, Sepal.Width), data=iris) + geom_line()
ggplot(aes(Sepal.Length, Sepal.Width), data=iris) + geom_point
ggplot(aes(Sepal.Length, Sepal.Width), data=iris) + geom_point()
ggplot(aes(Sepal.Length, Petal.Length), data=iris) + geom_point()
ggplot(aes(Sepal.Width, Petal.Width), data=iris) + geom_point()
ggplot(aes(Petal.Width, Petal.Width), data=iris) + geom_point()
ggplot(aes(Petal.Length, Petal.Width), data=iris) + geom_point()
ggplot(aes(Sepal.Length, Petal.Width), data=iris) + geom_point()
ggplot(aes(Petal.Width, Sepal.Width), data=iris) + geom_point()
ggplot(aes(Petal.Width, Sepal.Length), data=iris) + geom_point()
ggplot(aes(Petal.Width, Sepal.Length, colour=Species), data=iris) + geom_point()
ggplot(aes(Petal.Width, Sepal.Length), data=iris) + geom_point(colour="firebrick")
g.plot <- ggplot(aes(Petal.Width, Sepal.Length), data=iris) +
geom_point(colour="firebrick")
g
g.plot
g.plot <- g.plot + ggtitle("Iris Data")
g
g.plot
g.plot <- g.plot + theme(plot.title = element_text(size=20, face="bold"))
g.plot
g.plot <- g.plot + theme(plot.title = element_text(size=20, face="bold"))
g.plot
g.plot <- g.plot + labs(x="Sepal: L", y="Petal: W")
g.plot
g.plot <- g.plot + theme(axis.x.text = element_text(colour="blue"))
g.plot <- g.plot + theme(axis.title.x = element_text(colour="blue"))
g.plot <- g.plot + theme(axis.title.x = element_text(colour="blue"),
axis.title.y = element_text(colour="green"))
g.plot
g.plot <- g.plot + theme(axis.title.x = element_text(colour="cyan"),
axis.title.y = element_text(colour="purple"))
g.plot
g.plot <- g.plot + theme(axis.title.x = element_text(colour="red"),
axis.title.y = element_text(colour="purple"))
g.plot
g.plot <- g.plot + theme(axis.title.x = element_text(colour="blue"),
axis.title.y = element_text(colour="purple"))
g.plot
g.plot <- g.plot + xlim(1.5) + ylim(6)
g.plot <- g.plot + ylim(6)
g.plot <- g.plot + ylim(c(0, 6))
g.plot <- g.plot + xlim(c(0,2))
g.plot
g.plot <- g.plot + ylim(c(0, 10))
g.plot <- g.plot + xlim(c(0,10))
g.plot
g.plot <- g.plot + xlim(c(0,3))
g.plot <- g.plot + ylim(c(0, 8))
g.plot <- g.plot + xlim(c(0,3))
g.plot <- g.plot + ylim(c(0, 8))
g.plot <- g.plot + xlim(c(0,3))
g.plot
g.plot <- g.plot + ylim(c(2, 8))
g.plot <- g.plot + xlim(c(0,3))
g.plot
g.plot <- g.plot + ylim(c(4, 8))
g.plot <- g.plot + xlim(c(0,3))
g.plot
library(ggplot2)
library(ggplot2)
train.data <- read.csv('/Users/dannyg/Desktop/MNIST/train.csv')
library(ggplot2)
train.data <- read.csv('/Users/dannyg/Desktop/MNIST/train.csv')
test.data <- read.csv('/Users/dannyg/Desktop/MNIST/test.csv')
head(train.data, 10)
ggplot(aes(x=rownames(train.data), y=train.data)) + geom_point()
ggplot(aes(x=rownames(train.data), y=train.data[:,:])) + geom_point()
ggplot(aes(x=rownames(train.data), y=train.data[,])) + geom_point()
library(ggplot2)
train.data <- read.csv('/Users/dannyg/Desktop/MNIST/train.csv')
test.data <- read.csv('/Users/dannyg/Desktop/MNIST/test.csv')
head(train.data, 10)
library(tsne)
library(Rtsne)
tsne.data <- Rtsne(as.matrix(train.data))
ggplot(aes(x=rownames(tsne), y=tsne.data$Y)) + geom_point()
head(tsne.data)
ggplot(aes(x=rownames(tsne.data), y=tsne.data$Y)) + geom_point()
ggplot(aes(x=rownames(tsne.data), y=tsne.data$Y), data=tsne.data) + geom_point()
tsne.data <- Rtsne(as.matrix(train.data[2:]))
tsne.data <- Rtsne(as.matrix(train.data[c(1:,)]))
tsne.data <- Rtsne(as.matrix(train.data[c(1:),]))
tsne.data <- Rtsne(as.matrix(train.data[, 2:.]))
tsne.data <- Rtsne(as.matrix(train.data[, 2:]))
head(train.data)
tsne.data <- Rtsne(as.matrix(train.data[, 2:783]))
plot(tsne.data$Y, col=train.data$label)
ggplot(aes(y=tsne.data$Y, colour=train.data$label), data=tsne.data) + geom_point()
ggplot(aes(x=tsne.data$Y[,1], y=tsne.data$Y[,2] colour=train.data$label), data=tsne.data) + geom_point()
ggplot(aes(x=tsne.data$Y[,1], y=tsne.data$Y[,2], colour=train.data$label), data=tsne.data) + geom_point()
ggplot(aes(x=tsne.data$Y[,1], y=tsne.data$Y[,2], colour=train.data$label), data=tsne.data) + geom_point()
maxs <- apply(train.data, 2, max)
mins <- apply(train.data, 2, min)
scaled <- as.data.frame(scale(train.data, center = mins, scale = maxs - mins))
index <- sample(1:nrows(train.data), round(0.75 * nrows(train.data)))
index <- sample(1:nrows(train.data), round(0.75 * nrow(train.data)))
index <- sample(1:nrow(train.data), round(0.75 * nrow(train.data)))
train_ <- scaled[index]
train_ <- scaled[index]
train_ <- scaled[train.data]
index <- sample(1:nrow(train.data), round(0.75 * nrow(train.data)))
train_ <- scaled[train.data]
train_ <- scaled[train.data,]
library(MASS)
index <- sample(1:nrow(data), round(0.75 * nrow(data)))
set.seed(50)
data <- Boston
index <- sample(1:nrow(data), round(0.75 * nrow(data)))
train_ <- data[index]
train_ <- data[index,]
train <- data[index,]
test <- data[-index,]
lm.fit <- glm(medv~., data=train)
summary(lm.fit)
pr.lm <- predict(lm.fit, test)
pr.lm <- predict(lm.fit, test)
mean_squared_error <- sum((pr.lm - test$medv)^2)/nrow(test)
maxs <- apply(data, 2, max)
mins <- apply(data, 2, min)
scaled <- as.data.frame(scale(data, center=mins, scale= maxs - mins))
train_ = scaled[index, ]
test_ = scaled[-index,]
library(neuralnet)
install.packages(neuralnet)
install.packages('neuralnet')
library(neuralnet)
install.packages('grid')
install.packages("grid")
library(neuralnet)
library(MASS)
library(neuralnet)
m <- names(train_)
n <- names(train_)
f <- as.formula(paste("medv ~", paste(n[!n, %in%, "medv"], collapse = " + ")))
f <- as.formula(paste("medv ~", paste(n[!n %in% "medv"], collapse = " + ")))
nn <- neuralnet(f, data=train_, hidden = c(5, 3), linear.output = T)
nn <- neuralnet(f, data=train_, hidden = c(5, 3), linear.output = TRUE)
plot(nn)
plot(nn)
plot(nn)
plot(nn)
nn <- neuralnet(f, data=train_, hidden = c(12, 10), linear.output = TRUE)
plot(nn)
nn <- neuralnet(f, data=train_, hidden = c(5, 3), linear.output = TRUE)
plot(nn)
nn <- neuralnet(f, data=train_, hidden = c(5, 3), linear.output = TRUE)
library(MASS)
set.seed(50)
data <- Boston
index <- sample(1:nrow(data), round(0.75 * nrow(data)))
train <- data[index,]
test <- data[-index,]
lm.fit <- glm(medv~., data=train)
summary(lm.fit)
pr.lm <- predict(lm.fit, test)
mean_squared_error <- sum((pr.lm - test$medv)^2)/nrow(test)
maxs <- apply(data, 2, max)
mins <- apply(data, 2, min)
scaled <- as.data.frame(scale(data, center=mins, scale= maxs - mins))
train_ = scaled[index, ]
test_ = scaled[-index,]
library(neuralnet)
n <- names(train_)
f <- as.formula(paste("medv ~", paste(n[!n %in% "medv"], collapse = " + ")))
nn <- neuralnet(f, data=train_, hidden = c(5, 3), linear.output = TRUE)
plot(nn)
plot(nn)
library(MASS)
set.seed(50)
data <- Boston
index <- sample(1:nrow(data), round(0.75 * nrow(data)))
train <- data[index,]
test <- data[-index,]
lm.fit <- glm(medv~., data=train)
summary(lm.fit)
pr.lm <- predict(lm.fit, test)
mean_squared_error <- sum((pr.lm - test$medv)^2)/nrow(test)
maxs <- apply(data, 2, max)
mins <- apply(data, 2, min)
scaled <- as.data.frame(scale(data, center=mins, scale= maxs - mins))
train_ = scaled[index, ]
test_ = scaled[-index,]
library(neuralnet)
n <- names(train_)
f <- as.formula(paste("medv ~", paste(n[!n %in% "medv"], collapse = " + ")))
nn <- neuralnet(f, data=train_, hidden = c(5, 3), linear.output = TRUE)
plot(nn)
plot(nn)
plot(nn)
plot(nn)
library(ggplot2)
data <- iris
d <- iris
ggplot(aes(d$Petal.Length, d$Sepal.Length, colour=d$Species), data=d) + geom_line()
ggplot(aes(d$Petal.Length, d$Sepal.Length, colour=d$Species), data=d) + geom_point()
?%in%
?"%in%"
x <- 5
tt <- c(1,2,3,4,5,6,7,5)
x %in% tt
f <- x %in% tt
f
x <- c(5)
tt <- c(1,2,3,4,5,6,7,5)
?"%in%"
f <- x %in% tt
f
x <- c(1,2,3,4,5,0,0,0)
tt <- c(1,2,3,4,5,6,7,5)
?"%in%"
f <- x %in% tt
f
match(x,tt)
tt <- c(0,2,3,4,5,6,7,5)
match(x,tt)
'%DannyG%' <- function(x,y) { (x ** y) / 3.14}
5 %DannyG% 6
?'<<-'
with(d, t.test(Species ~ Sepal.Length))
with(d, t.test(Species ~ d[1:4]))
with(d, Species = 0)
with(d, Species * 5)
with(iris, Sepal.Length <= 5)
within(iris, Sepal.Length <= 5)
df = data.frame(a=1:10, b=5:15)
df = data.frame(a=1:10, b=6:15)
df
with(df, t <- a * b)
t
g <- with(df, t <- a * b)
g
df
g <- within(df, c <- a * b)
g
?assign
assign("dan", 55)
dan
?get
get(dan)
get("dan")
get("t")
?identical
identical(a,b)
a <- 5
b <- 6
identical(a,b)
b <- 5
identical(a,b)
?all.equal
all.equal(a,b)
b <- 6
all.equal(a,b)
?%%
?'%%'
abs(a)
abs(-a)
sign(a)
sign(-a)
trunc(a)
log2(5)
2 ** 2.32
cummax(a)
a <- c(1,2,3,4,5)
cummax(a)
cummax(a)
?cummax
?pmax
?rle
rle(a)
a <- c(1,700,3,4,5)
rle(a)
rle(a)[0]
?missing
missing(a)
dan <- function(a,b)
{
return a + b
}
dan <- function(a,b) {
return a + b
}
dan <- function(a,b) {
return (a + b)
}
dan(a,5)
missing(a)
missing(a)
dan <- function(t,b) {
missing(t)
return (t + b)
}
missing(t)
dan(a,5)
return missing(t)
dan <- function(t,b) {
missing(t)
return (missing(t))
}
dan(a,5)
?invisible
invisible (a * b)
dan <- function(t,b) {
missing(t)
invisible (a * b)
return (missing(t))
}
?all
?any
?which
which(a)
matrix([[1,2,3], [4,5,6]])
matrix([1,2,3], [4,5,6])
matrix(c(1,2,3), c(4,5,6))
?dim
?dim(a)
dim(a)
?cbind
?cbind
?t
t(a)
?diag
?sweep
?rep
?seq
seq(1,10,2)
seq(1,10,3.1415)
seq(1,100,3.1415)
seq(1,101,3.1415)
seq(1,105,3.1415)
?rev
?choose
choose(1.5,5)
?unlist
?split
?next
?apply
apply(a, dan)
a <- 5
b <- 6
apply(c(a,b), dan)
apply(dan, c(a,b))
apply(FUN=dan, c(a,b))
library(ggplot2)
data(diamonds)
ggplot(aes(price, carat), data = diamonds) +
geom_line()
ggplot(aes(price, carat), data = diamonds) +
geom_point()
scale_x_continuous(limits = c(0, quantile(price, 0.99)))
scale_x_continuous(limits = c(0, quantile(~price, 0.99)))
scale_x_continuous(limits = c(0, quantile(diamonds$price, 0.99)))
ggplot(aes(price, carat), data = diamonds) +
geom_point() +
scale_x_continuous(limits = c(0, quantile(diamonds$price, 0.99)))
ggplot(aes(price, carat), data = diamonds) +
geom_point() +
scale_x_continuous(limits = c(0, quantile(diamonds$price, 0.99))) +
scale_y_continuous(limits = c(0, quantile(diamonds$carat, 0.99)))
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(limits = c(0, quantile(diamonds$price, 0.99))) +
scale_y_continuous(limits = c(0, quantile(diamonds$carat, 0.99)))
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(limits = c(0, quantile(diamonds$carat, 0.99))) +
scale_y_continuous(limits = c(0, quantile(diamonds$price, 0.99)))
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(limits = c(0, quantile(diamonds$carat, 0.99))) +
scale_y_continuous(limits = c(0, quantile(diamonds$price, 0.99))) +
stat_smooth(method = 'lm')
install.packages('GGally')
install.packages('scales')
install.packages('memisc')
install.packages('lattice')
install.packages('MASS')
install.packages("scales")
install.packages("scales")
install.packages("scales")
ggplot(aes(price, carat), data = diamonds) +
geom_jitter(aes(colour = color), alpha = 1/2) +
facet_wrap(~clarity)
ggplot(aes(carat, price), data = diamonds) +
geom_jitter(alpha = 1/2) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
library(ggplot2)
ggplot(aes(carat, price), data = diamonds) +
geom_jitter(alpha = 1/2) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
library(ggplot2)
setwd('/Users/dannyg/Desktop/')
setwd('/Users/dannyg/Desktop/StockMarketAnalysis/')
stock_data <- read.csv('dow_jones_index/dow_jones_index.csv')
str(stock_data)
head(stock_data)
ggplot(aes(volume, high), data = stock_data) +
geom_point(aes(colour = ~stock))
ggplot(aes(volume, high), data = stock_data) +
geom_point(aes(colour = stock), data = stock_data)
ggplot(aes(high, volume), data = stock_data) +
geom_point(aes(colour = stock), data = stock_data)
ggplot(aes(high, volume), data = stock_data) +
geom_point(aes(colour = stock), alpha = 1/20, data = stock_data)
ggplot(aes(high, volume), data = stock_data) +
geom_point(aes(colour = stock), alpha = 1/5, data = stock_data)
